generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id        Int      @id @default(autoincrement())
  clerkId   String   @unique
  email     String?
  mobile    String?
  name      String?
  createdAt DateTime @default(now())

  // Business fields
  businessName      String?
  businessType      String?
  businessAddress   String?
  businessIsland    String?
  businessAtoll     String?
  businessTelephone String?
  bannerImageUrl    String?
  avatarImageUrl    String?
  location          String?
  links             Json?     // JSON field to store multiple links
  storeDescription  String?
  menus             Menu[]
  urlVisits         URLVisit[]
  url               String?   // New URL field
}

model Menu {
  id        Int        @id @default(autoincrement())
  name      String
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  categories Category[]
  position  Int
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  menuId    Int
  menu      Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  products  Product[]
  position  Int
}

model Product {
  id                Int     @id @default(autoincrement())
  name              String
  price             Float
  description       String?
  categoryId        Int
  category          Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  position          Int
  imageUrl          String?
  active            Int     @default(1)  // 1 for true, 0 for false
  soldOut           Int     @default(0)  // 1 for true, 0 for false
  discountPercentage Float?
  discountFixed     Float?
  likes             Int     @default(0)
  notice            String?
  allergyCodes      Int[]   // Array of integers to represent different allergies
}

model URLVisit {
  id        Int      @id @default(autoincrement())
  storeId   String
  timestamp DateTime @default(now())
  store     User     @relation(fields: [storeId], references: [clerkId], onDelete: Cascade)
}
